PinkBlack :: args : {'gpu': 0, 'batch_size': 12, 'train_signal': '/home/azureuser/env/utils/radio/clean/', 'train_noise': '/home/azureuser/env/utils/radio/noise/', 'test_signal': '/home/azureuser/env/utils/radio/valclean', 'test_noise': '/home/azureuser/env/utils/radio/valnoise/', 'sequence_length': 16384, 'num_step': 1000, 'validation_interval': 500, 'num_workers': 0, 'ckpt': 'unet/ckpt.pth', 'model_complexity': 45, 'lr': 0.01, 'num_signal': 0, 'num_noise': 0, 'optimizer': 'adam', 'lr_decay': 0.5, 'momentum': 0, 'multi_gpu': False, 'complex': True, 'model_depth': 20, 'swa': False, 'loss': 'wsdr', 'log_amp': False, 'metric': 'pesq', 'train_dataset': 'se', 'valid_dataset': 'se', 'preload': False, 'padding_mode': 'reflect'}
Got 14086 signals and 14086 mixtures.
Got 1781 signals and 1781 mixtures.
SourceSeparator(
  (net): Sequential(
    (0): STFT(
      (stft): STFT(fft_length=1024, hop_length=256, win_length=None)(center=True, pad_mode=reflect, normalized=False, onesided=True)
      (amp2db): AmplitudeToDb(ref=1.0, amin=1e-07)
    )
    (1): UNet(
      (encoder0): Encoder(
        (conv): ComplexConv2d(
          (conv_re): Conv2d(1, 31, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0))
          (conv_im): Conv2d(1, 31, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0))
        )
        (bn): ComplexBatchNorm2d(
          (bn_re): BatchNorm2d(31, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (bn_im): BatchNorm2d(31, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01, inplace)
      )
      (encoder1): Encoder(
        (conv): ComplexConv2d(
          (conv_re): Conv2d(31, 31, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3))
          (conv_im): Conv2d(31, 31, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3))
        )
        (bn): ComplexBatchNorm2d(
          (bn_re): BatchNorm2d(31, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (bn_im): BatchNorm2d(31, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01, inplace)
      )
      (encoder2): Encoder(
        (conv): ComplexConv2d(
          (conv_re): Conv2d(31, 62, kernel_size=(6, 4), stride=(2, 2), padding=[2, 1])
          (conv_im): Conv2d(31, 62, kernel_size=(6, 4), stride=(2, 2), padding=[2, 1])
        )
        (bn): ComplexBatchNorm2d(
          (bn_re): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (bn_im): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01, inplace)
      )
      (encoder3): Encoder(
        (conv): ComplexConv2d(
          (conv_re): Conv2d(62, 62, kernel_size=(7, 5), stride=(2, 1), padding=[3, 2])
          (conv_im): Conv2d(62, 62, kernel_size=(7, 5), stride=(2, 1), padding=[3, 2])
        )
        (bn): ComplexBatchNorm2d(
          (bn_re): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (bn_im): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01, inplace)
      )
      (encoder4): Encoder(
        (conv): ComplexConv2d(
          (conv_re): Conv2d(62, 62, kernel_size=(5, 3), stride=(2, 2), padding=[2, 1])
          (conv_im): Conv2d(62, 62, kernel_size=(5, 3), stride=(2, 2), padding=[2, 1])
        )
        (bn): ComplexBatchNorm2d(
          (bn_re): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (bn_im): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01, inplace)
      )
      (encoder5): Encoder(
        (conv): ComplexConv2d(
          (conv_re): Conv2d(62, 62, kernel_size=(5, 3), stride=(2, 1), padding=[2, 1])
          (conv_im): Conv2d(62, 62, kernel_size=(5, 3), stride=(2, 1), padding=[2, 1])
        )
        (bn): ComplexBatchNorm2d(
          (bn_re): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (bn_im): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01, inplace)
      )
      (encoder6): Encoder(
        (conv): ComplexConv2d(
          (conv_re): Conv2d(62, 62, kernel_size=(5, 3), stride=(2, 2), padding=[2, 1])
          (conv_im): Conv2d(62, 62, kernel_size=(5, 3), stride=(2, 2), padding=[2, 1])
        )
        (bn): ComplexBatchNorm2d(
          (bn_re): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (bn_im): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01, inplace)
      )
      (encoder7): Encoder(
        (conv): ComplexConv2d(
          (conv_re): Conv2d(62, 62, kernel_size=(5, 3), stride=(2, 1), padding=[2, 1])
          (conv_im): Conv2d(62, 62, kernel_size=(5, 3), stride=(2, 1), padding=[2, 1])
        )
        (bn): ComplexBatchNorm2d(
          (bn_re): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (bn_im): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01, inplace)
      )
      (encoder8): Encoder(
        (conv): ComplexConv2d(
          (conv_re): Conv2d(62, 62, kernel_size=(5, 3), stride=(2, 2), padding=[2, 1])
          (conv_im): Conv2d(62, 62, kernel_size=(5, 3), stride=(2, 2), padding=[2, 1])
        )
        (bn): ComplexBatchNorm2d(
          (bn_re): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (bn_im): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01, inplace)
      )
      (encoder9): Encoder(
        (conv): ComplexConv2d(
          (conv_re): Conv2d(62, 128, kernel_size=(5, 3), stride=(2, 1), padding=[2, 1])
          (conv_im): Conv2d(62, 128, kernel_size=(5, 3), stride=(2, 1), padding=[2, 1])
        )
        (bn): ComplexBatchNorm2d(
          (bn_re): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (bn_im): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01, inplace)
      )
      (decoder0): Decoder(
        (transconv): ComplexConvTranspose2d(
          (tconv_re): ConvTranspose2d(128, 62, kernel_size=(4, 3), stride=(2, 1), padding=(1, 1))
          (tconv_im): ConvTranspose2d(128, 62, kernel_size=(4, 3), stride=(2, 1), padding=(1, 1))
        )
        (bn): ComplexBatchNorm2d(
          (bn_re): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (bn_im): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01, inplace)
      )
      (decoder1): Decoder(
        (transconv): ComplexConvTranspose2d(
          (tconv_re): ConvTranspose2d(124, 62, kernel_size=(4, 2), stride=(2, 2), padding=(1, 0))
          (tconv_im): ConvTranspose2d(124, 62, kernel_size=(4, 2), stride=(2, 2), padding=(1, 0))
        )
        (bn): ComplexBatchNorm2d(
          (bn_re): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (bn_im): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01, inplace)
      )
      (decoder2): Decoder(
        (transconv): ComplexConvTranspose2d(
          (tconv_re): ConvTranspose2d(124, 62, kernel_size=(4, 3), stride=(2, 1), padding=(1, 1))
          (tconv_im): ConvTranspose2d(124, 62, kernel_size=(4, 3), stride=(2, 1), padding=(1, 1))
        )
        (bn): ComplexBatchNorm2d(
          (bn_re): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (bn_im): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01, inplace)
      )
      (decoder3): Decoder(
        (transconv): ComplexConvTranspose2d(
          (tconv_re): ConvTranspose2d(124, 62, kernel_size=(4, 2), stride=(2, 2), padding=(1, 0))
          (tconv_im): ConvTranspose2d(124, 62, kernel_size=(4, 2), stride=(2, 2), padding=(1, 0))
        )
        (bn): ComplexBatchNorm2d(
          (bn_re): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (bn_im): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01, inplace)
      )
      (decoder4): Decoder(
        (transconv): ComplexConvTranspose2d(
          (tconv_re): ConvTranspose2d(124, 62, kernel_size=(4, 3), stride=(2, 1), padding=(1, 1))
          (tconv_im): ConvTranspose2d(124, 62, kernel_size=(4, 3), stride=(2, 1), padding=(1, 1))
        )
        (bn): ComplexBatchNorm2d(
          (bn_re): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (bn_im): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01, inplace)
      )
      (decoder5): Decoder(
        (transconv): ComplexConvTranspose2d(
          (tconv_re): ConvTranspose2d(124, 62, kernel_size=(4, 2), stride=(2, 2), padding=(1, 0))
          (tconv_im): ConvTranspose2d(124, 62, kernel_size=(4, 2), stride=(2, 2), padding=(1, 0))
        )
        (bn): ComplexBatchNorm2d(
          (bn_re): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (bn_im): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01, inplace)
      )
      (decoder6): Decoder(
        (transconv): ComplexConvTranspose2d(
          (tconv_re): ConvTranspose2d(124, 62, kernel_size=(6, 3), stride=(2, 1), padding=(2, 1))
          (tconv_im): ConvTranspose2d(124, 62, kernel_size=(6, 3), stride=(2, 1), padding=(2, 1))
        )
        (bn): ComplexBatchNorm2d(
          (bn_re): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (bn_im): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01, inplace)
      )
      (decoder7): Decoder(
        (transconv): ComplexConvTranspose2d(
          (tconv_re): ConvTranspose2d(124, 62, kernel_size=(7, 5), stride=(2, 2), padding=(2, 1))
          (tconv_im): ConvTranspose2d(124, 62, kernel_size=(7, 5), stride=(2, 2), padding=(2, 1))
        )
        (bn): ComplexBatchNorm2d(
          (bn_re): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (bn_im): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01, inplace)
      )
      (decoder8): Decoder(
        (transconv): ComplexConvTranspose2d(
          (tconv_re): ConvTranspose2d(93, 62, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3))
          (tconv_im): ConvTranspose2d(93, 62, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3))
        )
        (bn): ComplexBatchNorm2d(
          (bn_re): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (bn_im): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01, inplace)
      )
      (decoder9): Decoder(
        (transconv): ComplexConvTranspose2d(
          (tconv_re): ConvTranspose2d(93, 62, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0))
          (tconv_im): ConvTranspose2d(93, 62, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0))
        )
        (bn): ComplexBatchNorm2d(
          (bn_re): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (bn_im): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): LeakyReLU(negative_slope=0.01, inplace)
      )
      (linear): ComplexConv2d(
        (conv_re): Conv2d(62, 1, kernel_size=(1, 1), stride=(1, 1))
        (conv_im): Conv2d(62, 1, kernel_size=(1, 1), stride=(1, 1))
      )
      (decoders): ModuleList(
        (0): Decoder(
          (transconv): ComplexConvTranspose2d(
            (tconv_re): ConvTranspose2d(128, 62, kernel_size=(4, 3), stride=(2, 1), padding=(1, 1))
            (tconv_im): ConvTranspose2d(128, 62, kernel_size=(4, 3), stride=(2, 1), padding=(1, 1))
          )
          (bn): ComplexBatchNorm2d(
            (bn_re): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (bn_im): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (relu): LeakyReLU(negative_slope=0.01, inplace)
        )
        (1): Decoder(
          (transconv): ComplexConvTranspose2d(
            (tconv_re): ConvTranspose2d(124, 62, kernel_size=(4, 2), stride=(2, 2), padding=(1, 0))
            (tconv_im): ConvTranspose2d(124, 62, kernel_size=(4, 2), stride=(2, 2), padding=(1, 0))
          )
          (bn): ComplexBatchNorm2d(
            (bn_re): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (bn_im): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (relu): LeakyReLU(negative_slope=0.01, inplace)
        )
        (2): Decoder(
          (transconv): ComplexConvTranspose2d(
            (tconv_re): ConvTranspose2d(124, 62, kernel_size=(4, 3), stride=(2, 1), padding=(1, 1))
            (tconv_im): ConvTranspose2d(124, 62, kernel_size=(4, 3), stride=(2, 1), padding=(1, 1))
          )
          (bn): ComplexBatchNorm2d(
            (bn_re): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (bn_im): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (relu): LeakyReLU(negative_slope=0.01, inplace)
        )
        (3): Decoder(
          (transconv): ComplexConvTranspose2d(
            (tconv_re): ConvTranspose2d(124, 62, kernel_size=(4, 2), stride=(2, 2), padding=(1, 0))
            (tconv_im): ConvTranspose2d(124, 62, kernel_size=(4, 2), stride=(2, 2), padding=(1, 0))
          )
          (bn): ComplexBatchNorm2d(
            (bn_re): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (bn_im): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (relu): LeakyReLU(negative_slope=0.01, inplace)
        )
        (4): Decoder(
          (transconv): ComplexConvTranspose2d(
            (tconv_re): ConvTranspose2d(124, 62, kernel_size=(4, 3), stride=(2, 1), padding=(1, 1))
            (tconv_im): ConvTranspose2d(124, 62, kernel_size=(4, 3), stride=(2, 1), padding=(1, 1))
          )
          (bn): ComplexBatchNorm2d(
            (bn_re): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (bn_im): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (relu): LeakyReLU(negative_slope=0.01, inplace)
        )
        (5): Decoder(
          (transconv): ComplexConvTranspose2d(
            (tconv_re): ConvTranspose2d(124, 62, kernel_size=(4, 2), stride=(2, 2), padding=(1, 0))
            (tconv_im): ConvTranspose2d(124, 62, kernel_size=(4, 2), stride=(2, 2), padding=(1, 0))
          )
          (bn): ComplexBatchNorm2d(
            (bn_re): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (bn_im): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (relu): LeakyReLU(negative_slope=0.01, inplace)
        )
        (6): Decoder(
          (transconv): ComplexConvTranspose2d(
            (tconv_re): ConvTranspose2d(124, 62, kernel_size=(6, 3), stride=(2, 1), padding=(2, 1))
            (tconv_im): ConvTranspose2d(124, 62, kernel_size=(6, 3), stride=(2, 1), padding=(2, 1))
          )
          (bn): ComplexBatchNorm2d(
            (bn_re): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (bn_im): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (relu): LeakyReLU(negative_slope=0.01, inplace)
        )
        (7): Decoder(
          (transconv): ComplexConvTranspose2d(
            (tconv_re): ConvTranspose2d(124, 62, kernel_size=(7, 5), stride=(2, 2), padding=(2, 1))
            (tconv_im): ConvTranspose2d(124, 62, kernel_size=(7, 5), stride=(2, 2), padding=(2, 1))
          )
          (bn): ComplexBatchNorm2d(
            (bn_re): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (bn_im): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (relu): LeakyReLU(negative_slope=0.01, inplace)
        )
        (8): Decoder(
          (transconv): ComplexConvTranspose2d(
            (tconv_re): ConvTranspose2d(93, 62, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3))
            (tconv_im): ConvTranspose2d(93, 62, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3))
          )
          (bn): ComplexBatchNorm2d(
            (bn_re): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (bn_im): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (relu): LeakyReLU(negative_slope=0.01, inplace)
        )
        (9): Decoder(
          (transconv): ComplexConvTranspose2d(
            (tconv_re): ConvTranspose2d(93, 62, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0))
            (tconv_im): ConvTranspose2d(93, 62, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0))
          )
          (bn): ComplexBatchNorm2d(
            (bn_re): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (bn_im): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (relu): LeakyReLU(negative_slope=0.01, inplace)
        )
      )
      (encoders): ModuleList(
        (0): Encoder(
          (conv): ComplexConv2d(
            (conv_re): Conv2d(1, 31, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0))
            (conv_im): Conv2d(1, 31, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0))
          )
          (bn): ComplexBatchNorm2d(
            (bn_re): BatchNorm2d(31, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (bn_im): BatchNorm2d(31, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (relu): LeakyReLU(negative_slope=0.01, inplace)
        )
        (1): Encoder(
          (conv): ComplexConv2d(
            (conv_re): Conv2d(31, 31, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3))
            (conv_im): Conv2d(31, 31, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3))
          )
          (bn): ComplexBatchNorm2d(
            (bn_re): BatchNorm2d(31, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (bn_im): BatchNorm2d(31, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (relu): LeakyReLU(negative_slope=0.01, inplace)
        )
        (2): Encoder(
          (conv): ComplexConv2d(
            (conv_re): Conv2d(31, 62, kernel_size=(6, 4), stride=(2, 2), padding=[2, 1])
            (conv_im): Conv2d(31, 62, kernel_size=(6, 4), stride=(2, 2), padding=[2, 1])
          )
          (bn): ComplexBatchNorm2d(
            (bn_re): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (bn_im): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (relu): LeakyReLU(negative_slope=0.01, inplace)
        )
        (3): Encoder(
          (conv): ComplexConv2d(
            (conv_re): Conv2d(62, 62, kernel_size=(7, 5), stride=(2, 1), padding=[3, 2])
            (conv_im): Conv2d(62, 62, kernel_size=(7, 5), stride=(2, 1), padding=[3, 2])
          )
          (bn): ComplexBatchNorm2d(
            (bn_re): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (bn_im): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (relu): LeakyReLU(negative_slope=0.01, inplace)
        )
        (4): Encoder(
          (conv): ComplexConv2d(
            (conv_re): Conv2d(62, 62, kernel_size=(5, 3), stride=(2, 2), padding=[2, 1])
            (conv_im): Conv2d(62, 62, kernel_size=(5, 3), stride=(2, 2), padding=[2, 1])
          )
          (bn): ComplexBatchNorm2d(
            (bn_re): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (bn_im): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (relu): LeakyReLU(negative_slope=0.01, inplace)
        )
        (5): Encoder(
          (conv): ComplexConv2d(
            (conv_re): Conv2d(62, 62, kernel_size=(5, 3), stride=(2, 1), padding=[2, 1])
            (conv_im): Conv2d(62, 62, kernel_size=(5, 3), stride=(2, 1), padding=[2, 1])
          )
          (bn): ComplexBatchNorm2d(
            (bn_re): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (bn_im): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (relu): LeakyReLU(negative_slope=0.01, inplace)
        )
        (6): Encoder(
          (conv): ComplexConv2d(
            (conv_re): Conv2d(62, 62, kernel_size=(5, 3), stride=(2, 2), padding=[2, 1])
            (conv_im): Conv2d(62, 62, kernel_size=(5, 3), stride=(2, 2), padding=[2, 1])
          )
          (bn): ComplexBatchNorm2d(
            (bn_re): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (bn_im): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (relu): LeakyReLU(negative_slope=0.01, inplace)
        )
        (7): Encoder(
          (conv): ComplexConv2d(
            (conv_re): Conv2d(62, 62, kernel_size=(5, 3), stride=(2, 1), padding=[2, 1])
            (conv_im): Conv2d(62, 62, kernel_size=(5, 3), stride=(2, 1), padding=[2, 1])
          )
          (bn): ComplexBatchNorm2d(
            (bn_re): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (bn_im): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (relu): LeakyReLU(negative_slope=0.01, inplace)
        )
        (8): Encoder(
          (conv): ComplexConv2d(
            (conv_re): Conv2d(62, 62, kernel_size=(5, 3), stride=(2, 2), padding=[2, 1])
            (conv_im): Conv2d(62, 62, kernel_size=(5, 3), stride=(2, 2), padding=[2, 1])
          )
          (bn): ComplexBatchNorm2d(
            (bn_re): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (bn_im): BatchNorm2d(62, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (relu): LeakyReLU(negative_slope=0.01, inplace)
        )
        (9): Encoder(
          (conv): ComplexConv2d(
            (conv_re): Conv2d(62, 128, kernel_size=(5, 3), stride=(2, 1), padding=[2, 1])
            (conv_im): Conv2d(62, 128, kernel_size=(5, 3), stride=(2, 1), padding=[2, 1])
          )
          (bn): ComplexBatchNorm2d(
            (bn_re): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (bn_im): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
          (relu): LeakyReLU(negative_slope=0.01, inplace)
        )
      )
    )
    (2): ApplyMask(
      (amp2db): DbToAmplitude(ref=1.0)
    )
    (3): ISTFT(
      (amp2db): DbToAmplitude(ref=1.0)
    )
  )
)
|---------------------|---------------------|---------------------|---------------------|---------------------|---------------------|---------------------|
|         step        |      train_loss     |     train_metric    |       val_loss      |      val_metric     |          lr         |         time        |
|---------------------|---------------------|---------------------|---------------------|---------------------|---------------------|---------------------|
  0%|          | 0/500 [00:00<?, ?it/s]  0%|          | 1/500 [00:03<28:37,  3.44s/it]  0%|          | 2/500 [00:06<28:27,  3.43s/it]  1%|          | 3/500 [00:10<28:20,  3.42s/it]  1%|          | 4/500 [00:13<28:15,  3.42s/it]  1%|1         | 5/500 [00:17<28:04,  3.40s/it]/home/azureuser/anaconda3/envs/coco/lib/python3.6/site-packages/pypesq/__init__.py:53: UserWarning: Processing Error! return NaN
  warnings.warn('Processing Error! return NaN')
  1%|1         | 6/500 [00:20<27:56,  3.39s/it]  1%|1         | 7/500 [00:23<27:47,  3.38s/it]                                               [33mTraceback (Most recent call last):
[31m[1m155[0m train_dcunet.py[0m                                                                      [1m[32m<module>[0m [33m--> [1mtrainer.train(step=args.num_step, validation_interval=args.validation_interval)[0m                       
[31m[1m219[0m /home/azureuser/anaconda3/envs/coco/lib/python3.6/site-packages/PinkBlack/trainer.py[0m [1m[32mtrain[0m    [33m--> [1mself.config[f'{phase}_loss'], self.config[f'{phase}_metric'] = self._train(phase, num_steps=num_steps)[0m
[31m[1m331[0m /home/azureuser/anaconda3/envs/coco/lib/python3.6/site-packages/PinkBlack/trainer.py[0m [1m[32m_train[0m   [33m--> [1mresults = self._step(phase=phase, iterator=step_iterator)[0m                                             
[31m[1m303[0m /home/azureuser/anaconda3/envs/coco/lib/python3.6/site-packages/PinkBlack/trainer.py[0m [1m[32m_step[0m    [33m--> [1mself.optimizer.step()[0m                                                                                 
[31m[1m94[0m  /home/azureuser/anaconda3/envs/coco/lib/python3.6/site-packages/torch/optim/adam.py[0m  [1m[32mstep[0m     [33m--> [1mexp_avg_sq.mul_(beta2).addcmul_(1 - beta2, grad, grad)[0m                                                
[31m[1mKeyboardInterrupt: 
